@using System.Threading
@model ExpressiveAnnotations.MvcWebSample.Models.Query

@{
    var lang = Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName;
    var client = "client".Equals(ViewBag.Validation);
    var triggers = ViewBag.Triggers;
}

<div class="box">
    <div class="left-corner">
        <h1>ExpressiveAnnotations - annotation-based conditional validation</h1>
    </div>
    <div class="right-corner">
        <a href="https://github.com/JaroslawWaliszko/ExpressiveAnnotations">[more on github]</a>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true) @*show/hide validation summary block*@ 

    <div class="message-success">@(ViewBag.Success ?? Html.Raw("&nbsp;"))</div>

    <fieldset>
        <legend>Usage sample for model validation in ASP.NET MVC</legend>
        <div class="box-small">
            <div class="right-corner">
                @Html.Partial("_Culture")
                @Html.Partial("_Validation")
            </div>
        </div>
        @Html.EditorFor(model => model)
        <input type="submit" />
    </fieldset>
}

@section Scripts {
    @if (client)
    {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/expressive") // load expressive.annotations.validate.js

        <script>
            // var expann = ea.noConflict(); // in case of naming collision, return control of the ea variable back to its origins (old references of ea are saved during ExpressiveAnnotations initialization; noConflict() restores them)
            // expann.addMethod... // do something with ExpressiveAnnotations
            // ea... // do something with original ea variable

            var triggers = '@triggers';
            ea.settings.dependencyTriggers = /\S/.test(triggers) ? triggers : undefined; // if not explicitly provided, default setup is: 'change paste keyup'
            $(document).ready(function() {
                $('#triggers input[type="checkbox"]').on('click', function() {
                    // disable some excessive activity if you wish, and e.g. trigger dependent fields validation only when field 'change' event is fired
                    // when all triggers are disabled, validation will be fired on form submit attempt only
                    var triggers = $('#triggers input[type="checkbox"]:checked').map(function() {
                        return $(this).attr('data-val');
                    }).toArray();
                    window.location.href = '/System/SetTriggers?events=' + triggers.join(' ') + '&returnUrl=/';
                });
            });

            @if ("pl" == lang)
            {
                <text>
                    ea.settings.parseDate = function(str) { // override default date parsing mechanism (to deal with yyyy-mm-dd format)
                        if (!/^\d{4}-\d{2}-\d{2}$/.test(str)) { // in case the str does not have the desired format...
                            return Date.parse(str); // ...default date parser is used
                        }
                        var arr = str.split('-');
                        var date = new Date(arr[0], arr[1] - 1, arr[2]); // months are 0-based
                        return date.getTime(); // return milliseconds
                    }
                </text>
            }

            ea.addMethod('IsBloodType', function(group) {
                return /^(A|B|AB|0)[\+-]$/.test(group);
            });
            ea.addMethod('AddYears', function(from, years) {
                from = new Date(from); // preprocessed datetime arguments passed to functions are given milliseconds
                var to = from.getFullYear() + years;
                from.setFullYear(to);
                return from.getTime();
            });
            ea.addMethod("ArrayContains", function(value, array) {
                return $.inArray(value, array) >= 0;
            });
        </script>
    }

    <script>
        $(document).ready(function() {
            $('.action').click(function() {
                $(this).hide();
                $(this).parent().find('.code').toggle('slow');
            });
            $('.date').datepicker($.datepicker.regional["@lang"]).on('change', function() {
                if (typeof $('.date').valid == 'function') { // safety check if our demo project is not set to server side validation only (no jquery.validate.js loaded)
                    $('.date').valid(); // triggers the validation test on change (to avoid second click)
                }
            });
            $('#triggers input[type="checkbox"]').attr('disabled', @Json.Encode(!client));
        });

        $.datepicker.regional['pl'] = {
            closeText: 'Zamknij',
            prevText: '&#x3C;Poprzedni',
            nextText: 'Następny&#x3E;',
            currentText: 'Dziś',
            monthNames: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
            monthNamesShort: ['Sty', 'Lu', 'Mar', 'Kw', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Pa', 'Lis', 'Gru'],
            dayNames: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
            dayNamesShort: ['Nie', 'Pn', 'Wt', 'Śr', 'Czw', 'Pt', 'So'],
            dayNamesMin: ['N', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'So'],
            weekHeader: 'Tydz',
            dateFormat: 'yy-mm-dd',
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ''
        };
    </script>
}
